print = Str d l p: intrinsic_write p d l

println = a: let _ = print a
    in print "\n"

debug = a:
    let _ = intrinsic_debug a
    in print "\n"

trace = a: let _ = debug a in a

div = intrinsic_div
plus = intrinsic_plus
mul = intrinsic_mul
rem = intrinsic_rem
minus = intrinsic_minus
lt = a: b: match intrinsic_lt a b with
        0 => False,
        _ => True,
    end
le = a: b: lt a (plus b 1)
eq = a: b: match intrinsic_eq a b with
        1 => True,
        0 => False,
    end

lt_u8 = a: b: lt (intrinsic_u8_to_i64 a) (intrinsic_u8_to_i64 b)
le_u8 = a: b: le (intrinsic_u8_to_i64 a) (intrinsic_u8_to_i64 b)
eq_u8 = a: b:
    match intrinsic_eq_u8 a b with
        0 => False,
        _ => True,
    end

div_f64 = intrinsic_div_f64
plus_f64 = intrinsic_plus_f64
mul_f64 = intrinsic_mul_f64
minus_f64 = intrinsic_minus_f64
lt_f64 = a: b: match intrinsic_lt_f64 a b with
        0 => False,
        _ => True,
    end
le_f64 = a: b: match intrinsic_le_f64 a b with
        0 => False,
        _ => True,
    end
eq_f64 = a: b: match intrinsic_eq_f64 a b with
        1 => True,
        0 => False,
    end
sqrt_f64 = intrinsic_sqrt_f64


malloc = intrinsic_malloc
mut = intrinsic_mut
get = intrinsic_get
set = intrinsic_set

fold = acc: l: f: match l with
        Nil => acc,
        Cons a l => fold (f acc a) l f,
    end

list_all = l: f: match l with
        Nil => True,
        Cons a l => match f a with
                False => False,
                True => list_all l f,
            end,
    end

data True 0
data False 0

not = a: match a with
        True => False,
        False => True,
    end

and = a: b: match a with
        False => False,
        True => b,
    end

or = a: b: match a with
        True => True,
        False => b,
    end

bool_to_string = a: match a with
        True => "True",
        False => "False",
    end

panic = msg:
    let _ = print "error: "
    in let _ = println msg
    in intrinsic_panic Unit

assert = a: match a with
        True => Unit,
        False => panic "assertion failed",
    end

f64_to_str = a:
    let Str _ _ format_string = "%0.9f"
    in let n = intrinsic_f64_str_len a format_string
    in let s = malloc n
    in let _ = intrinsic_write_f64 s n a format_string
    in Str 0 (minus n 1) s

fix = f: a: f (fix f) a

data Nil 0
data Cons 2

list_map = l: f: match l with
        Nil => Nil,
        Cons h t => Cons (f h) (list_map t f),
    end

list_append = as: bs: match as with
        Nil => bs,
        Cons h t => Cons h (list_append t bs),
    end

list_flatten_aux = acc: ls: match ls with
        Nil => acc,
        Cons l ls => list_flatten_aux (list_append l acc) ls,
    end

list_flatten = ls: list_flatten_aux Nil (reverse ls)

list_nth = Cons h t: n: match n with
        0 => h,
        _ => list_nth t (minus n 1),
    end

pop_str = Str d l p:
    match l with
        0 => Nil,
        _ => let c = intrinsic_load_u8 p d
            in let s = Str (plus d 1) (minus l 1) p
            in Cons c s,
    end

str_get = Str d l p: i:
    match lt i l with
        False => None,
        True => Some (intrinsic_load_u8 p (plus d i)),
    end

log10 = a: match a with
        0 => 0,
        _ => plus (log10 (div a 10)) 1,
    end

zero_char_i64 = intrinsic_u8_to_i64 '0'

i64_to_string_aux = sig: s: d: a: l:
    match l with
        0 => Unit,
        _ =>
            let d = minus d 1
            in let _ = intrinsic_store_u8 s d (intrinsic_i64_to_u8 (sig zero_char_i64 (rem a 10)))
            in i64_to_string_aux sig s d (div a 10) (minus l 1),
    end

max = a: b: match lt a b with
        True => b,
        False => a,
    end

i64_to_string = a:
    let negative = lt a 0
    in let l = max 1 (log10 a)
    in let str_l = plus l match negative with True => 1, False => 0, end
    in let s = intrinsic_malloc str_l
    in let sig = match negative with
            False => plus,
            True =>
                let _ = intrinsic_store_u8 s 0 45u8
                in minus,
        end
    in let _ = i64_to_string_aux sig s str_l a l
    in Str 0 str_l s

ptr_copy = dist: dist_d: src: src_d: len: match len with
        0 => Unit,
        _ => let _ = intrinsic_store_u8 dist dist_d (intrinsic_load_u8 src src_d)
            in ptr_copy dist (plus dist_d 1) src (plus src_d 1) (minus len 1),
    end

append_str = Str d1 l1 p1: Str d2 l2 p2:
    let l = plus l1 l2
    in let p = intrinsic_malloc l
    in let _ = ptr_copy p 0 p1 d1 l1
    in let _ = ptr_copy p l1 p2 d2 l2
    in Str 0 l p

str_len = Str _ l _: l

data None 0
data Some 1

getchar = _: let s = intrinsic_getchar 0
    in match s with
        -1 => None,
        _ => Some (intrinsic_i64_to_u8 s),
    end

data Array 3

array_new = _: Array 0 0 (malloc 0)
array_with_capacity = data_type: cap: Array 0 cap (malloc (mul cap (size data_type)))

store_u8 = intrinsic_store_u8
store_f64 = intrinsic_store_f64

data U8Type 0
data F64Type 0

size = d: match d with
        U8Type => 1,
        F64Type => 8,
    end

store = data_type: match data_type with
        U8Type => store_u8,
        F64Type => store_f64,
    end

array_add_capacity = data_type: Array len cap p: d:
    let new_cap = max (mul cap 2) (plus len d)
    in let new_p = malloc (mul new_cap (size data_type))
    in let _ = ptr_copy new_p 0 p 0 (mul len (size data_type))
    in Array len new_cap new_p

array_push = data_type: Array len cap p: a:
    let Cons cap p =
        match lt len cap with
            True => Cons cap p,
            False => let Array len cap p = array_add_capacity data_type (Array len cap p) 1
                in Cons cap p,
        end
    in let _ = store data_type p len a
    in Array (plus len 1) cap p

array_append = Array len cap p: Str d2 len2 p2:
    let Cons cap p =
        match le (plus len len2) cap with
            True => Cons cap p,
            False => let Array len cap p = array_add_capacity U8Type (Array len cap p) len2
                in Cons cap p,
        end
    in let _ = ptr_copy p len p2 d2 len2
    in Array (plus len len2) cap p

array_get_f64 = Array len cap p: i:
    let True = lt i len
    in intrinsic_load_f64 p i

array_set_f64 = Array len cap p: i: a:
    let True = lt i len
    in intrinsic_store_f64 p i a

array_to_str = Array len cap p: Str 0 len p

read_file = Array len cap p: fp:
    let n = intrinsic_read_file p len (minus cap len) fp (intrinsic_mut 0)
    in Array (plus len n) cap p

read_stdin = buff: read_file buff intrinsic_stdin

read_all_aux = buff: let buff = read_stdin buff
    in let Array len cap p = buff
    in match eq len cap with
        False => buff,
        True => read_all_aux (array_add_capacity U8Type (Array len cap p) cap),
    end

read_all = _: read_all_aux (array_add_capacity U8Type (array_new Unit) 1)

reverse_aux = a: b:
    match a with
        Nil => b,
        Cons h a => reverse_aux a (Cons h b),
    end

reverse = l: reverse_aux l Nil

len_aux = acc: l: match l with
        Nil => acc,
        Cons _ l => len_aux (plus 1 acc) l,
    end

len = len_aux 0

char_list_to_string_aux = m: d: l:
    match l with
        Nil => Unit,
        Cons h l =>
            let _ = intrinsic_store_u8 m d h
            in char_list_to_string_aux m (plus d 1) l,
    end

char_list_to_string = a:
    let l = len a
    in let s = malloc l
    in let _ = char_list_to_string_aux s 0 a
    in Str 0 l s

string_to_char_list = s: match pop_str s with
        Nil => Nil,
        Cons a s => Cons a (string_to_char_list s)
    end

pop_input = i:
    match i with
        Nil => match getchar Unit with
                    None => Nil,
                    Some c => Cons c Nil,
                end,
        _ => i,
    end

string_eq = a: b: match Cons (pop_str a) (pop_str b) with
        Cons Nil Nil => True,
        Cons (Cons ah at) (Cons bh bt) => match eq_u8 ah bh with
                False => False,
                True => string_eq at bt,
            end,
        _ => False,
    end

char_list_to_num_aux = acc: s: match s with
        Nil => acc,
        Cons c s => match and (le_u8 48u8 c) (le_u8 c 57u8) with
            False => acc,
            True => char_list_to_num_aux
                    (plus (mul 10 acc) (minus (intrinsic_u8_to_i64 c) 48))
                    s,
        end,
    end

char_list_to_num = char_list_to_num_aux 0

str_to_num_aux = acc: s: match pop_str s with
        Nil => acc,
        Cons c s => match and (le_u8 48u8 c) (le_u8 c 57u8) with
            False => acc,
            True => str_to_num_aux
                    (plus (mul 10 acc) (minus (intrinsic_u8_to_i64 c) 48))
                    s,
        end,
    end

str_to_num = str_to_num_aux 0

data Err 1
data Ok 1

ok_map = a: f: match a with
        Ok a => Ok (f a),
        Err a => Err a,
    end

read_num = a:
    let c = intrinsic_getchar 0
    in match (and (le 48 c) (le c 57)) with
            False => a,
            True => read_num (plus (mul 10 a) (minus c 48)),
        end

str_eq_aux = n: s1: d1: s2: d2: match n with
        0 => True,
        _ => match eq_u8 (intrinsic_load_u8 s1 d1) (intrinsic_load_u8 s2 d2) with
                True => str_eq_aux (minus n 1) s1 (plus d1 1) s2 (plus d2 1),
                False => False,
            end,
    end

str_eq = Str d1 n1 s1: Str d2 n2 s2: match eq n1 n2 with
        True => str_eq_aux n1 s1 d1 s2 d2,
        False => False,
    end

data Gt 0
data Lt 0
data Eq 0

u8_cmp = a: b: match Cons (lt_u8 a b) (lt_u8 b a) with
        Cons True _ => Lt,
        Cons _ True => Gt,
        _ => Eq,
    end

str_cmp_aux = n1: s1: d1: n2: s2: d2: match Cons n1 n2 with
        Cons 0 0 => Eq,
        Cons 0 _ => Lt,
        Cons _ 0 => Gt,
        Cons _ _ => match u8_cmp (intrinsic_load_u8 s1 d1) (intrinsic_load_u8 s2 d2) with
                Eq => str_cmp_aux
                    (minus n1 1)
                    s1
                    (plus d1 1)
                    (minus n2 1)
                    s2
                    (plus d2 1),
                c => c,
            end,
    end

str_cmp = Str d1 n1 s1: Str d2 n2 s2: str_cmp_aux n1 s1 d1 n2 s2 d2

