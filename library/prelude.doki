print = Str l p: intrinsic_write p l

println = a: let _ = print a
    in print "\n"

div = intrinsic_div
plus = intrinsic_plus
mul = intrinsic_mul
rem = intrinsic_rem
minus = intrinsic_minus
lt = a: b: match intrinsic_lt a b with
        0 => False,
        _ => True,
    end
le = a: b: lt a (plus b 1)
le_u8 = a: b: le (intrinsic_u8_to_i64 a) (intrinsic_u8_to_i64 b)
eq = a: b: match intrinsic_eq a b with
        1 => True,
        0 => False,
    end
eq_u8 = a: b:
    match intrinsic_eq_u8 a b with
        0 => False,
        _ => True,
    end
malloc = intrinsic_malloc

data Unit 0

data Nil 0
data Cons 2
data True 0
data False 0

not = a: match a with
        True => False,
        False => True,
    end

and = a: b: match a with
        False => False,
        True => b,
    end

or = a: b: match a with
        True => True,
        False => b,
    end

pop_str = Str l p:
    match l with
        0 => Nil,
        _ => let c = intrinsic_load_u8 p
            in let s = Str (minus l 1) (intrinsic_add_ptr p 1)
            in Cons c s,
    end

log10 = a: match a with
        0 => 0,
        _ => plus (log10 (div a 10)) 1,
    end

i64_to_string_aux = s: a: l:
    match l with
        0 => Unit,
        _ =>
            let s = intrinsic_add_ptr s -1
            in let _ = intrinsic_store_u8 s (intrinsic_i64_to_u8 (plus 48 (rem a 10)))
            in i64_to_string_aux s (div a 10) (minus l 1),
    end

max = a: b: match lt a b with
        True => b,
        False => a,
    end

i64_to_string = a:
    let negative = lt a 0
    in let l = max 1 (log10 a)
    in let str_l = plus l match negative with True => 1, False => 0, end
    in let s = intrinsic_malloc str_l
    in let a = match negative with
            False => a,
            True =>
                let _ = intrinsic_store_u8 s 45u8
                in minus 0 a,
        end
    in let _ = i64_to_string_aux (intrinsic_add_ptr s str_l) a l
    in Str str_l s

memcpy = dist: src: len: match len with
        0 => Unit,
        _ => let _ = intrinsic_store_u8 dist (intrinsic_load_u8 src)
            in memcpy (intrinsic_add_ptr dist 1) (intrinsic_add_ptr src 1) (minus len 1),
    end

append_str = Str l1 p1: Str l2 p2:
    let l = plus l1 l2
    in let p = intrinsic_malloc l
    in let _ = memcpy p p1 l1
    in let _ = memcpy (intrinsic_add_ptr p l1) p2 l2
    in Str l p

data None 0
data Some 1

getchar = _: let s = intrinsic_getchar 0
    in match s with
        -1 => None,
        _ => Some (intrinsic_i64_to_u8 s),
    end

read_all_aux = s:
    match getchar Unit with
        None => s,
        Some c => read_all_aux (Cons c s),
    end

reverse_aux = a: b:
    match a with
        Nil => b,
        Cons h a => reverse_aux a (Cons h b),
    end

reverse = l: reverse_aux l Nil

read_all = _: reverse (read_all_aux Nil)

len_aux = acc: l: match l with
        Nil => acc,
        Cons _ l => len_aux (plus 1 acc) l,
    end

len = len_aux 0

char_list_to_string_aux = m: l:
    match l with
        Nil => Unit,
        Cons h l =>
            let _ = intrinsic_store_u8 m h
            in char_list_to_string_aux (intrinsic_add_ptr m 1) l,
    end

char_list_to_string = a:
    let l = len a
    in let s = malloc l
    in let _ = char_list_to_string_aux s a
    in Str l s

string_to_char_list = s: match pop_str s with
        Nil => Nil,
        Cons a s => Cons a (string_to_char_list s)
    end

pop_input = i:
    match i with
        Nil => match getchar Unit with
                    None => Nil,
                    Some c => Cons c Nil,
                end,
        _ => i,
    end

memcpy = dist: src: len: match len with
        0 => Unit,
        _ => let _ = intrinsic_store_u8 dist (intrinsic_load_u8 src)
            in memcpy (intrinsic_add_ptr dist 1) (intrinsic_add_ptr src 1) (minus len 1),
    end

string_eq = a: b: match Cons (pop_str a) (pop_str b) with
        Cons Nil Nil => True,
        Cons (Cons ah at) (Cons bh bt) => match eq_u8 ah bh with
                False => False,
                True => string_eq at bt,
            end,
    end

char_list_to_num_aux = acc: s: match s with
        Nil => acc,
        Cons c s => match and (le_u8 48u8 c) (le_u8 c 57u8) with
            False => acc,
            True => char_list_to_num_aux
                    (plus (mul 10 acc) (minus (intrinsic_u8_to_i64 c) 48))
                    s,
        end,
    end

char_list_to_num = char_list_to_num_aux 0

data Err 1
data Ok 1

read_num = a:
    let c = intrinsic_getchar 0
    in match (and (le 48 c) (le c 57)) with
            False => a,
            True => read_num (plus (mul 10 a) (minus c 48)),
        end

str_eq_aux = n: s1: s2: match n with
        0 => True,
        _ => match eq_u8 (intrinsic_load_u8 s1) (intrinsic_load_u8 s2) with
                True => str_eq_aux (minus n 1) (intrinsic_add_ptr s1 1) (intrinsic_add_ptr s2 1),
                False => False,
            end,
    end

str_eq = Str n1 s1: Str n2 s2: match eq n1 n2 with
        True => str_eq_aux n1 s1 s2,
        False => False,
    end
