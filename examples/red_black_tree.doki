data True 0
data False 0
data Pair 2

lt = a: b: match intrinsic_lt a b with
        0 => False,
        _ => True,
    end

println = a: intrinsic_print_str (intrinsic_append_str a "\n")

bool_to_string = a: match a with
        True => "True",
        False => "False",
    end

data E 0
data T 4
data R 0
data B 0

insert = x: t: match insert_rec x t with
        T c x a b => T B x a b,
    end

insert_rec = x: t: match t with
        E => T R x E E,
        T color y a b => match Pair (lt x y) (lt y x) with
                Pair True _ => balance (T color y (insert_rec x a) b),
                Pair _ True => balance (T color y a (insert_rec x b)),
                _ => T B y a b,
            end,
    end

balance = t: match t with
        T B w (T R u (T R v t1 t2) t3) t4
        | T B w (T R v t1 (T R u t2 t3)) t4
        | T B v t1 (T R w (T R u t2 t3) t4)
        | T B v t1 (T R u t2 (T R w t3 t4)) =>
            T R u (T B v t1 t2) (T B w t3 t4),
        t => t,
    end

contains = x: t: match t with
        E => False,
        T _ v l r => match Pair (lt x v) (lt v x) with
                Pair True _ => contains x l,
                Pair _ True => contains x r,
                _ => True,
            end,
    end

main = a: let test0 = contains 0 E
    in let t = insert 100 (insert 0 (insert 0 (insert 4 (insert 2 E))))
    in let test1 = contains 0 t
    in let test2 = contains 3 t
    in println match Pair test0 (Pair test1 test2) with
        Pair False (Pair True False) => "ok",
        True => "ng",
    end
