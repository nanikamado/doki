data True 0
data False 0

lt = a: b: match intrinsic_lt a b with
        0 => False,
        _ => True,
    end

println = a: intrinsic_print_str (intrinsic_append_str a "\n")

bool_to_string = a: match a with
        True => "True",
        False => "False",
    end

not = a: match a with
        True => False,
        False => True,
    end

and = a: b: match a with
        True => match b with
                True => True,
                False => False,
            end,
        False => False,
    end

data E 0
data T 3
data Pair 2

insert = x: t: match t with
        E => T x E E,
        T v l r => match Pair (lt x v) (lt v x) with
                Pair True _ => T v (insert x l) r,
                Pair _ True => T v l (insert x r),
                _ => T v l r,
            end,
    end

contains = x: t: match t with
        E => False,
        T v l r => match Pair (lt x v) (lt v x) with
                Pair True _ => contains x l,
                Pair _ True => contains x r,
                _ => True,
            end,
    end

main = _: let test0 = not (contains 0 E)
    in let t = insert 100 (insert 0 (insert 0 (insert 4 (insert 2 E))))
    in let test1 = contains 0 t
    in let test2 = not (contains 3 t)
    in println match and test0 (and test1 test2) with
        True => "ok",
        False => "ng",
    end
