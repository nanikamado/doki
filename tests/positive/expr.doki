import "../../library/prelude.doki"

parser_map = a: f: i:
    match a i with
        Ok (Cons a i) => Ok (Cons (f a) i),
        Err e => Err e,
    end

just = s: i:
    match pop_str s with
        Nil => Ok (Cons Nil i),
        Cons c s =>
            match i with
                Nil => Err Unit,
                Cons i_c i =>
                    match eq_u8 c i_c with
                        False => Err Unit,
                        True => parser_map (just s) (Cons c) i,
                    end,
            end,
    end

str_contains = s: c: match pop_str s with
        Nil => False,
        Cons s_c s => match eq_u8 s_c c with
                False => str_contains s c,
                True => True,
            end,
    end

one_of = s: i: match i with
        Nil => Err Unit,
        Cons c i => match str_contains s c with
                True => Ok (Cons c i),
                False => Err Unit,
            end,
    end

then = p1: p2: i:
    match p1 i with
        Err e => Err e,
        Ok (Cons s1 i) => parser_map p2 (Cons s1) i
    end

alt = p1: p2: i:
    match p1 i with
        Err e => p2 i,
        Ok a => Ok a,
    end

any = i: match i with
        Nil => Err Unit,
        Cons c i => Ok (Cons c i),
    end

is_digit = c: and (le_u8 48u8 c) (le_u8 c 57u8)

filter = p: f: i: match p i with
        Err e => Err e,
        Ok (Cons a i) => match f a with
                True => Ok (Cons a i),
                False => Err Unit,
            end,
    end

digit = filter any is_digit

num = repeated_at_least_one digit

repeated_aux = p: i: match p i with
        Err _ => Cons Nil i,
        Ok (Cons a i) => let Cons l i = repeated_aux p i
            in Cons (Cons a l) i,
    end

repeated = p: i: Ok (repeated_aux p i)

repeated_at_least_one = p: i: then p (repeated p) i

is_ident_head = c: let c1 = and (le_u8 65u8 c) (le_u8 c 90u8)
    in let c2 = and (le_u8 97u8 c) (le_u8 c 122u8)
    in or (or c1 c2) (eq_u8 95u8 c)

is_ident_continue = c: or (or (is_ident_head c) (is_digit c)) (eq_u8 c 39u8)

ident = let ident_head = filter any is_ident_head
    in let ident_continue = repeated (filter any is_ident_continue)
    in let ident = then ident_head ident_continue
    in let f = c: let c = char_list_to_string c
        in not (or (string_eq c "in")
            (or (string_eq c "let") 
            (or (string_eq c "if")
            (or (string_eq c "then")
            (string_eq c "else")))))
    in filter ident f

data Num 1
data Ident 1
data LambdaAst 2
data Lambda 3
data Apply 2
data If 3
data Plus 2
data Minus 2
data Rem 2

then_ignore = a: b: parser_map (then a b) (Cons a _: a)
ignore_then = a: b: parser_map (then a b) (Cons _ a: a)

whitespace = repeated (one_of " \n\t")

padded = p: ignore_then whitespace (then_ignore p whitespace)

foldl = acc: l: f: match l with
        Nil => acc,
        Cons a l => foldl (f acc a) l f,
    end

expr = i: let num = parser_map num (n: Num (char_list_to_num n))
    in let ident = padded ident
    in let lambda = then (then_ignore ident (just ":")) expr
    in let lambda = parser_map lambda (Cons i e: LambdaAst i e)
    in let let_ = then_ignore (ignore_then (just "let") ident) (just "=")
    in let let_ = then let_ (then expr (ignore_then (just "in") expr))
    in let let_ = parser_map let_ (Cons i (Cons e1 e2): Apply (LambdaAst i e2) e1)
    in let if = ignore_then (just "if")
            (then expr (ignore_then (just "then")
            (then expr (ignore_then (just "else") expr))))
    in let if = parser_map if (Cons c (Cons t e): If c t e)
    in let ident = parser_map ident Ident
    in let paren = then_ignore (ignore_then (just "(") expr) (just ")")
    in let single = alt num (alt let_ (alt if (alt lambda (alt paren ident))))
    in parser_map (repeated_at_least_one (padded single)) (Cons h l: foldl h l Apply) i

expr_to_string = e: match e with
        Num n => i64_to_string n,
        Ident n => char_list_to_string n,
        LambdaAst i e => append_str "("
                (append_str
                    (char_list_to_string i)
                    (append_str ":"
                        (append_str (expr_to_string e) ")"))),
        If c t e => append_str "if "
                (append_str (expr_to_string c)
                (append_str " then "
                (append_str (expr_to_string t)
                (append_str " else " (expr_to_string e))))),
        Apply f a => append_str
            (append_str (append_str "(" (expr_to_string f)) " ")
            (append_str (expr_to_string a) ")"),
        Plus a b => append_str
            (append_str (append_str "(" (expr_to_string a)) "+")
            (append_str (expr_to_string b) ")"),
    end

value_to_string = e: match e with
        Num n => i64_to_string n,
        Lambda i e _ => append_str "("
                (append_str
                    (char_list_to_string i)
                    (append_str ":"
                        (append_str (expr_to_string e) ")"))),
    end

list_eq = a: b: match Cons a b with
        Cons (Cons ah a) (Cons bh b) => match eq_u8 ah bh with
                True => list_eq a b,
                False => False,
            end,
        Cons Nil Nil => True,
        _ => False,
    end

get_from_list = l: a: match l with
        Nil => None,
        Cons (Cons k v) l => match list_eq a k with
                True => Some v,
                False => get_from_list l a,
            end,
    end

flat_map = a: f: match a with
        Err e => Err e,
        Ok a => f a,
    end

numerical_binary = a: b: env: f: flat_map (eval a env) (a: flat_map (eval b env) (b:
        match Cons a b with
            Cons (Num a) (Num b) => Ok (Num (f a b)),
            Cons _ _ => Err "not a number",
        end
    ))

eval = e: env: match e with
        Num n => Ok (Num n),
        LambdaAst i e => Ok (Lambda i e env),
        Ident n => match get_from_list env n with
                None => let s = char_list_to_string n
                    in let s = append_str "ident `" s
                    in let s = append_str s "` was not found"
                    in Err s,
                Some v => Ok v,
            end,
        Apply f a => flat_map (eval f env) (f:
                    match f with
                        Lambda i e l_env => flat_map (eval a env)
                                (a: let env = Cons (Cons i a) l_env
                                    in eval e env),
                        _ => Err "not a function",
                    end
                ),
        If c t e => match eval c env with
                Ok (Num 0) => eval e env,
                Ok _ => eval t env,
                Err a => Err a,
            end,
        Plus a b => numerical_binary a b env plus,
        Minus a b => numerical_binary a b env minus,
        Rem a b => numerical_binary a b env rem,
    end

global_env = let a = string_to_char_list "a"
    in let b = string_to_char_list "b"
    in let make = c: s:
        let l = Lambda a (LambdaAst b (c (Ident a) (Ident b))) Nil
        in Cons (string_to_char_list s) l
    in let l1 = make Plus "plus"
    in let l2 = make Minus "minus"
    in let l3 = make Rem "rem"
    in Cons l3 (Cons l1 (Cons l2 Nil))

main = _:
    let s = read_all Unit
    in match expr s with
        Err Unit => println "err",
        Ok (Cons e _) => match eval e global_env with
                Ok e => println (value_to_string e),
                Err msg => println msg,
            end
    end
