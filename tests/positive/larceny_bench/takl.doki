data Unit 0

print = Str l p: intrinsic_write p l

println = a: let _ = print a
    in print "\n"

div = intrinsic_div
plus = intrinsic_plus
rem = intrinsic_rem
minus = intrinsic_minus
lt = intrinsic_lt
mul = intrinsic_mul
le = a: b: lt a (plus b 1)

log10 = a: match a with
        0 => 0,
        _ => plus (log10 (div a 10)) 1,
    end

i64_to_string_aux = s: a: l:
    match l with
        0 => Unit,
        _ =>
            let s = intrinsic_add_ptr s -1
            in let _ = intrinsic_store_u8 s (intrinsic_i64_to_u8 (plus 48 (rem a 10)))
            in i64_to_string_aux s (div a 10) (minus l 1),
    end

max = a: b: match (lt a b) with
        0 => a,
        _ => b,
    end

i64_to_string = a:
    let negative = (lt a 0)
    in let l = max 1 (log10 a)
    in let str_l = plus l negative
    in let s = intrinsic_malloc str_l
    in let a = match negative with
            0 => a,
            _ =>
                let _ = intrinsic_store_u8 s 45u8
                in (minus 0 a),
        end
    in let _ = i64_to_string_aux (intrinsic_add_ptr s str_l) a l
    in Str str_l s

read_num = a:
    let c = intrinsic_getchar 0
    in match (mul (le 48 c) (le c 57)) with
            0 => a,
            _ => read_num (plus (mul 10 a) (minus c 48)),
        end

data True 0
data False 0

data Nil 0
data Cons 2

list_n = n: match n with
        0 => Nil,
        _ => Cons n (list_n (minus n 1)),
    end

data Pair 2

shorter = a: b: match Pair a b with
        Pair _ Nil => False,
        Pair Nil (Cons _ _) => True,
        Pair (Cons _ a) (Cons _ b) => shorter a b,
    end

tail = Cons _ l: l

tak = x: y: z: match shorter y x with
        True => tak (tak (tail x) y z) (tak (tail y) z x) (tak (tail z) x y),
        False => z,
    end

len_aux = acc: l: match l with
        Nil => acc,
        Cons h t => len_aux (plus 1 acc) t,
    end

len = len_aux 0

main = _:
    let x = list_n (read_num 0)
    in let y = list_n (read_num 0)
    in let z = list_n (read_num 0)
    in let ans = len (tak x y z)
    in println (i64_to_string ans)
