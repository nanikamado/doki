data Unit 0

print = Str l p: intrinsic_write p l

println = a: let _ = print a
    in print "\n"

div = intrinsic_div
plus = intrinsic_plus
rem = intrinsic_rem
minus = intrinsic_minus
lt = intrinsic_lt

log10 = a: match a with
        0 => 0,
        _ => plus (log10 (div a 10)) 1,
    end

i64_to_string_aux = s: a: l:
    match l with
        0 => Unit,
        _ =>
            let s = intrinsic_add_ptr s -1
            in let _ = intrinsic_store_u8 s (intrinsic_i64_to_u8 (plus 48 (rem a 10)))
            in i64_to_string_aux s (div a 10) (minus l 1),
    end

max = a: b: match (lt a b) with
        0 => a,
        _ => b,
    end

i64_to_string = a:
    let l = max 1 (log10 a)
    in let s = intrinsic_malloc l
    in let _ = i64_to_string_aux (intrinsic_add_ptr s l) a l
    in Str l s

seq = a: match a with
        0 => Unit,
        _ => intrinsic_mut (seq (intrinsic_minus a 1)),
    end

len = a: match a with
        Unit => 0,
        _ => intrinsic_plus (len (intrinsic_get a)) 1,
    end

main = _:
    let a = len (seq 10)
    in println (i64_to_string a)
