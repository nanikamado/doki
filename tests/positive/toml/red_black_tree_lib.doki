import "../../../library/prelude.doki"

data E 0
data T 5
data R 0
data B 0

tree_insert = cmp: key: value: t: tree_modify cmp key t (v: match v with
        None => value,
        Some v => v,
    end)

balance = t: match t with
        T B wk wv (T R uk uv (T R vk vv t1 t2) t3) t4
        | T B wk wv (T R vk vv t1 (T R uk uv t2 t3)) t4
        | T B vk vv t1 (T R wk wv (T R uk uv t2 t3) t4)
        | T B vk vv t1 (T R uk uv t2 (T R wk wv t3 t4)) =>
            T R uk uv (T B vk vv t1 t2) (T B wk wv t3 t4),
        t => t,
    end

contains_key = cmp: x: t: match t with
        E => False,
        T _ k v l r => match cmp x k with
                Lt => contains_key x l,
                Gt => contains_key x r,
                Eq => True,
            end,
    end

tree_get = cmp: x: t: match t with
        E => None,
        T _ k v l r => match cmp x k with
                Lt => tree_get cmp x l,
                Gt => tree_get cmp x r,
                Eq => Some v,
            end,
    end

tree_modify = cmp: key: t: f: match tree_modify_rec cmp key t f with
        T _ key value a b => T B key value a b,
    end

tree_modify_rec = cmp: k: t: f: match t with
        E => T R k (f None) E E,
        T color key value a b => match cmp k key with
                Lt => balance (T color key value (tree_modify_rec cmp k a f) b),
                Gt => balance (T color key value a (tree_modify_rec cmp k b f)),
                Eq => T color key (f (Some value)) a b,
            end,
    end

tree_to_list = acc: t: match t with
        E => acc,
        T _ k v l r => let acc = tree_to_list acc r
            in let acc = Cons (Cons k v) acc
            in tree_to_list acc l,
    end

color_to_string = c: match c with
        R => "R",
        B => "B",
    end
