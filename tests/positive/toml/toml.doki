import "../../../library/prelude.doki"

char_list_to_num_hex_aux = acc: s:
    match s with
        Nil => acc,
        Cons c s =>
    match and (le_u8 48u8 c) (le_u8 c 57u8) with
        True =>
            char_list_to_num_hex_aux
                (plus (mul 16 acc) (minus (intrinsic_u8_to_i64 c) 48))
                s,
        False =>
    match and (le_u8 65u8 c) (le_u8 c 70u8) with
        True =>
            char_list_to_num_hex_aux
                (plus (mul 16 acc) (minus (intrinsic_u8_to_i64 c) 55))
                s,
        False =>
    match and (le_u8 97u8 c) (le_u8 c 102u8) with
        True =>
            char_list_to_num_hex_aux
                (plus (mul 16 acc) (minus (intrinsic_u8_to_i64 c) 87))
                s,
        False => acc,
    end,
    end,
    end,
    end

char_list_to_num_hex = char_list_to_num_hex_aux 0

char_list_to_num_oct_aux = acc: s: match s with
        Nil => acc,
        Cons c s => match and (le_u8 '0' c) (le_u8 c '7') with
            False => acc,
            True => char_list_to_num_oct_aux
                    (plus (mul 8 acc) (minus (intrinsic_u8_to_i64 c) 48))
                    s,
        end,
    end

char_list_to_num_oct = char_list_to_num_oct_aux 0

char_list_to_num_bin_aux = acc: s: match s with
        Nil => acc,
        Cons c s => match or (eq_u8 '0' c) (eq_u8 c '1') with
            False => acc,
            True => char_list_to_num_bin_aux
                    (plus (mul 2 acc) (minus (intrinsic_u8_to_i64 c) 48))
                    s,
        end,
    end

char_list_to_num_bin = char_list_to_num_bin_aux 0

unwrap_or = a: alt: match a with
        None => alt,
        Some a => a,
    end

ok_flat_map = a: f: match a with
        Ok a => f a,
        _ => a,
    end

right_shift_u8 = intrinsic_right_shift_u8
right_shift = intrinsic_right_shift
left_shift_u8 = intrinsic_left_shift_u8
left_shift = intrinsic_left_shift
bitwise_and = intrinsic_bitwise_and
bitwise_or = intrinsic_bitwise_or
bitwise_and_u8 = intrinsic_bitwise_and_u8
bitwise_or_u8 = intrinsic_bitwise_or_u8
i64_to_u8 = intrinsic_i64_to_u8

// =================== Basic Parser Combinator ===================

parser_map = a: f: i:
    match a i with
        Ok (Cons a i) => Ok (Cons (f a) i),
        Err e => Err e,
    end

parser_filter = a: f: i:
    match a i with
        Ok (Cons a i) => match f a with
                True => Ok (Cons a i),
                False => Err Unit,
            end,
        Err e => Err e,
    end

just_aux = s: i:
    match pop_str s with
        Nil => Ok (Cons Unit i),
        Cons c s =>
            match pop_str i with
                Nil => Err Unit,
                Cons i_c i =>
                    match eq_u8 c i_c with
                        False => Err Unit,
                        True => just_aux s i,
                    end,
            end,
    end

parser_slice = parser: Str d len p: ok_map
    (parser (Str d len p))
    (Cons _ (Str d2 len2 p2):
        Cons (Str d (minus len len2) p) (Str d2 len2 p2))

just = s: parser_slice (just_aux s)

str_contains = s: c: match pop_str s with
        Nil => False,
        Cons s_c s => match eq_u8 s_c c with
                False => str_contains s c,
                True => True,
            end,
    end

one_of = s: i: match pop_str i with
        Nil => Err Unit,
        Cons c i => match str_contains s c with
                True => Ok (Cons Unit i),
                False => Err Unit,
            end,
    end

none_of = s: i: match pop_str i with
        Nil => Err Unit,
        Cons c i => match str_contains s c with
                False => Ok (Cons Unit i),
                True => Err Unit,
            end,
    end

then_with_f = f: p1: p2: i:
    match p1 i with
        Err e => Err e,
        Ok (Cons s1 i) => parser_map p2 (f s1) i
    end

then = then_with_f Cons

then_with_state = p1: p2: acc: i:
    match p1 acc i with
        Err e => Err e,
        Ok (Cons acc i) => p2 acc i
    end

stateless_ignored = p: acc: i:
    match p i with
        Err e => Err e,
        Ok (Cons _ i) => Ok (Cons acc i),
    end

alt = p1: p2: i:
    match p1 i with
        Err e => p2 i,
        Ok a => Ok a,
    end

alt_with_state = p1: p2: acc: i:
    match p1 acc i with
        Err e => p2 acc i,
        Ok a => Ok a,
    end

or_not = p1: i:
    match p1 i with
        Err e => Ok (Cons None i),
        Ok (Cons a i) => Ok (Cons (Some a) i),
    end

any = i: match pop_str i with
        Nil => Err Unit,
        Cons c i => Ok (Cons c i),
    end

is_digit = c: and (le_u8 48u8 c) (le_u8 c 57u8)
is_digit_hex = c:
    or (and (le_u8 48u8 c) (le_u8 c 57u8))
    (or (and (le_u8 65u8 c) (le_u8 c 70u8))
    (and (le_u8 97u8 c) (le_u8 c 102u8)))
is_digit_oct = c: and (le_u8 '0' c) (le_u8 c '7')
is_digit_bin = c: or (eq_u8 '0' c) (eq_u8 c '1')

filter = p: f: i: match p i with
        Err e => Err e,
        Ok (Cons a i) => match f a with
                True => Ok (Cons a i),
                False => Err Unit,
            end,
    end

digit = filter any is_digit
digit_hex = filter any is_digit_hex
digit_oct = filter any is_digit_oct
digit_bin = filter any is_digit_bin

num = repeated_at_least_one digit

repeated_with_state = p: acc: i: match p acc i with
        Err _ => Ok (Cons acc i),
        Ok (Cons acc i) => repeated_with_state p acc i,
    end

repeated = p: parser_map (repeated_with_state (acc: parser_map p (a: Cons a acc)) Nil) reverse

repeated_at_least_one = p: i: then p (repeated p) i

repeated_with_count = p: n: i: match n with
        0 => Ok (Cons Nil i),
        _ => ok_flat_map
                (p i)
                (Cons a i:
                    ok_map
                        (repeated_with_count p (minus n 1) i)
                        (Cons l i: Cons (Cons a l) i)),
    end

then_ignore = then_with_f (a: _: a)
ignore_then = then_with_f (_: a: a)

whitespace = repeated (one_of " \t")

padded = p: ignore_then whitespace (then_ignore p whitespace)

delimited_by = start: p: _end: ignore_then start (then_ignore p _end)

separated_by_at_least_one_with_state = p: separator:
    then_with_state
        p
        (repeated_with_state (then_with_state (stateless_ignored separator) p))

separated_by_with_state = p: separator:
    alt_with_state
        (separated_by_at_least_one_with_state p separator)
        (acc: i: Ok (Cons acc i))

separated_by = p: separator:
    parser_map
        (separated_by_with_state (a: parser_map p (b: Cons b a)) separator Nil)
        reverse

separated_by_at_least_one = p: separator:
    parser_map
        (separated_by_at_least_one_with_state (a: parser_map p (b: Cons b a)) separator Nil)
        reverse

and_lazy = a: b: match a with
        True => b Unit,
        False => False,
    end

or_lazy = a: b: match a with
        False => b Unit,
        True => True,
    end

and_is = a: b: i: match a i with
        Err e => Err e,
        Ok a_r => match b i with
                Err e => Err e,
                Ok _ => Ok a_r,
            end,
    end

parser_not = p: i: match p i with
        Err _ => Ok (Cons Unit i),
        Ok _ => Err Unit,
    end

// =================== Date Parser =====================

days = Cons 31
    (Cons 0
    (Cons 31
    (Cons 30
    (Cons 31
    (Cons 30
    (Cons 31
    (Cons 31
    (Cons 30
    (Cons 31
    (Cons 30
    (Cons 31
    Nil)))))))))))

is_leap_year = y:
    and_lazy (eq (rem y 4) 0)
    (_: or_lazy (not (eq (rem y 100) 0))
    (_: eq (rem y 400) 0))

is_valid_date = y: m: d:
    match m with
        2 => match is_leap_year y with
                True => and (le 1 d) (le d 29),
                False => and (le 1 d) (le d 28),
            end,
        _ => and_lazy (and (le 1 m) (le m 12))
            (_: let max_day = list_nth days (minus m 1)
                in and (le 1 d) (le d max_day)),
    end

is_valid_time = h: m: s:
    and_lazy (and (le 0 h) (le h 23))
    (_: and_lazy (and (le 0 m) (le m 59))
    (_: and (le 0 s) (le s 59)))

data DateTime 2

date_parser = i:
    let d = c: parser_map (parser_slice (repeated_with_count digit c)) str_to_num
    in let date = then (d 4)
        (ignore_then (just "-")
        (then (d 2)
        (ignore_then (just "-")
        (d 2))))
    in let date = parser_filter date (Cons y (Cons m d): is_valid_date y m d)
    in let time = then (d 2)
        (ignore_then (just ":")
        (then (d 2)
        (ignore_then (just ":")
        (then_ignore (d 2)
        (or_not (then (just ".")
        num))))))
    in let time = parser_filter time (Cons h (Cons m s): is_valid_time h m s)
    in let add_t = t: p: parser_map (parser_slice p) (DateTime t)
    in let date_time = then date
            (then (one_of "Tt ")
            time)
    in let date_time_with_zone = then
        date_time
        (alt
            (then
                (one_of "+-")
                (then (d 2) (then (just ":") (d 2))))
            (one_of "Zz"))
    in let date_time =
        alt (add_t "datetime" date_time_with_zone)
        (alt (add_t "datetime-local" date_time)
        (alt (add_t "date-local" date)
        (add_t "time-local" time)))
    in date_time i

// =================== Num Parser ===================

num_with_underscore = prefix: digit:
    let num = parser_map (separated_by_at_least_one (repeated_at_least_one digit) (just "_")) list_flatten
    in ignore_then (just prefix) num

non_zero_digit = s: filter any (c: and (le_u8 '1' c) (le_u8 c '9')) s

toml_num = s:
    let num = then
        non_zero_digit
        (parser_map
            (then
                (repeated digit)
                (repeated (ignore_then (just "_") (repeated_at_least_one digit))))
            list_flatten)
    in let num = parser_map num char_list_to_num
    in let hex = parser_map (num_with_underscore "0x" digit_hex) char_list_to_num_hex
    in let oct = parser_map (num_with_underscore "0o" digit_oct) char_list_to_num_oct
    in let bin = parser_map (num_with_underscore "0b" digit_bin) char_list_to_num_bin
    in let num =
        alt (ignore_then (or_not (just "+")) num)
        (alt (ignore_then (just "-") (parser_map num (minus 0)))
        (alt hex
        (alt oct
        (alt bin
        (parser_map (then (or_not (one_of "+-")) (just "0")) (_: 0))))))
    in num s

float = s:
    let head_num = parser_map
        (then
            (parser_slice (then non_zero_digit (repeated digit)))
            (repeated (ignore_then (just "_") (parser_slice num))))
        concat_strings
    in let head_num = alt head_num (just "0")
    in let num_head = alt
        (ignore_then (or_not (just "+")) head_num)
        (parser_map (ignore_then (just "-") head_num) (append_str "-"))
    in let num = parser_slice num
    in let num = parser_map
        (then num (repeated (ignore_then (just "_") num)))
        concat_strings
    in let point_num = parser_map (ignore_then (just ".") num) (append_str ".")
    in let signed_num = alt
        (ignore_then (or_not (just "+")) num)
        (parser_map (ignore_then (just "-") num) (append_str "-"))
    in let exponent = parser_map (ignore_then (alt (just "e") (just "E")) signed_num) (append_str "e")
    in let or_empty = p: parser_map (or_not p) (a: unwrap_or a "")
    in let float = parser_map
        (then
            num_head
            (alt
                (parser_map
                    (then point_num (or_empty exponent))
                    (Cons a b: append_str a b))
                exponent))
        (Cons a b: append_str a b)
    in let float = alt float
        (alt (parser_slice (then (or_not (one_of "+-")) (just "inf")))
        (ignore_then (or_not (one_of "+-")) (just "nan")))
    in parser_map float Float s

// =================== Parser ===================

data Num 1
data TomlArray 1
data StaticArray 1
data Open 0
data SemiOpen 0
data Dotted 0
data Closed 0
data Table 2
data Float 1
data String 1
data Define 2
data BaseKey 1
data ListAppend 1

unicode_code_point_to_tail_len = c:
    match le c 0x7F with
        True => 0,
        False =>
    match le c 0x7FF with
        True => 1,
        False =>
    match le c 0xFFFF with
        True => 2,
        False => 3,
    end,
    end,
    end

i64_to_utf8_list = c:
    let tail_bytes = c: s:
        bitwise_or_u8 (i64_to_u8 (bitwise_and (right_shift c s) 0b111111)) 0b10000000u8
    in let head_byte = c: s: mask: i64_to_u8 (bitwise_or (right_shift c s) mask)
    in match unicode_code_point_to_tail_len c with
        0 => Cons (i64_to_u8 c) Nil,
        1 => Cons (head_byte c 6 0b11000000)
            (Cons (tail_bytes c 0) Nil),
        2 => Cons (head_byte c 12 0b11100000)
            (Cons (tail_bytes c 6)
            (Cons (tail_bytes c 0) Nil)),
        3 => Cons (head_byte c 18 0b11110000)
            (Cons (tail_bytes c 12)
            (Cons (tail_bytes c 6)
            (Cons (tail_bytes c 0) Nil))),
    end

validate_utf8 = head_filter: s:
    let c1 = parser_map (filter any head_filter) intrinsic_u8_to_i64
    in let tail = parser_map
        (filter any (c: eq_u8 (bitwise_and_u8 c 0b11000000u8) 0b10000000u8))
        (c: intrinsic_u8_to_i64 (bitwise_and_u8 c 0b00111111u8))
    in let tails = a: parser_map
        (repeated_with_count tail a)
        (cs: fold 0 cs (acc: c: plus (left_shift acc 6) c))
    in let cn = n: mask: tag: parser_map
        (then
            (filter any (c: eq_u8 (bitwise_and_u8 c mask) tag))
            (tails n))
        (Cons c b: plus
            (left_shift
                (intrinsic_u8_to_i64 (bitwise_and_u8 c (intrinsic_bitwise_not_u8 mask)))
                (mul 6 n))
            b)
    in let p = alt c1
        (alt (cn 1 0b11100000u8 0b11000000u8)
        (alt (cn 2 0b11110000u8 0b11100000u8)
        (cn 3 0b11111000u8 0b11110000u8)))
    in filter p (a: not (and (le 0xD800 a) (le a 0xDFFF))) s

concat_strings_to_array = ss: fold (array_new Unit) ss array_append

concat_strings = ss: array_to_str (concat_strings_to_array ss)

new_line = s: parser_map (then (or_not (just "\r")) (just "\n")) (_: Unit) s

escape = s:
    let unicode = l:
        parser_map
            (filter
                (parser_map (repeated_with_count digit_hex l) char_list_to_num_hex)
                (a: or (le a 0xd7ff) (and (le 0xe000 a) (le a 0x10ffff))))
            i64_to_utf8_list
    in let unicode_escape_4 = ignore_then (just "u") (unicode 4)
    in let unicode_escape_8 = ignore_then (just "U") (unicode 8)
    in alt (just "\\")
        (alt (just "\"")
        (alt (parser_map (just "b") (_: "\x08"))
        (alt (parser_map (just "t") (_: "\t"))
        (alt (parser_map (just "n") (_: "\n"))
        (alt (parser_map (just "f") (_: "\x0c"))
        (alt (parser_map (just "r") (_: "\r"))
        (parser_map (alt unicode_escape_4 unicode_escape_8) char_list_to_string)
        )))))) s

is_literal_string_content = c:
    or_lazy (and (le_u8 '(' c) (le_u8 c '~'))
    (_: or_lazy (and (le_u8 ' ' c) (le_u8 c '&'))
    (_: eq_u8 '\t' c))

is_string_content = c:
    or_lazy (and (le_u8 '#' c) (and (le_u8 c '~') (not (eq_u8 '\\' c))))
    (_: or_lazy (or (eq_u8 ' ' c) (eq_u8 '!' c))
    (_: eq_u8 '\t' c))

is_literal_multiline_content = c:
    or_lazy (and (le_u8 ' ' c) (le_u8 c '~'))
    (_: or_lazy (or (eq_u8 '\n' c) (eq_u8 '\r' c))
    (_: eq_u8 '\t' c))

is_multiline_content = c:
    or_lazy (and (le_u8 ' ' c) (and (le_u8 c '~') (not (eq_u8 '\\' c))))
    (_: or_lazy (or (eq_u8 '\n' c) (eq_u8 '\r' c))
    (_: eq_u8 '\t' c))

short_string = s:
    let basic_string = parser_slice (validate_utf8 is_string_content)
    in let basic_string = alt basic_string (ignore_then (just "\\") escape)
    in let basic_string = parser_map (repeated basic_string) concat_strings
    in let basic_string = delimited_by (just "\"") basic_string (just "\"")
    in let literal_string = delimited_by
        (just "'")
        (parser_slice (repeated (validate_utf8 is_literal_string_content)))
        (just "'")
    in alt basic_string literal_string s

long_string = s:
    let multiline_string = parser_slice (and_is
        (filter any is_multiline_content)
        (parser_not (then (just r#"""""#) (alt (parser_not (just r#"""#)) (just r#"""""#)))))
    in let escape = alt escape
        (parser_map (then (repeated (one_of " \t"))
                (then new_line
                (repeated (alt (one_of " \t\n") (just "\r\n")))))
            (_: ""))
    in let multiline_string = alt multiline_string (ignore_then (just "\\") escape)
    in let multiline_string = parser_map (repeated multiline_string) concat_strings
    in let multiline_string = delimited_by (then (just r#"""""#) (or_not new_line))
        multiline_string
        (just r#"""""#)
    in let multi_literal_string = parser_slice (repeated (and_is
        (validate_utf8 is_literal_multiline_content)
        (parser_not (then (just "'''") (alt (parser_not (just "'")) (just "'''"))))))
    in let multi_literal_string = delimited_by (then (just "'''") (or_not new_line))
        multi_literal_string
        (just "'''")
    in alt multiline_string multi_literal_string s

string = s: alt long_string short_string s

key = s: let is_ident_head = c: let c1 = and (le_u8 65u8 c) (le_u8 c 90u8)
        in let c2 = and (le_u8 97u8 c) (le_u8 c 122u8)
        in or (or c1 c2) (eq_u8 95u8 c)
    in let is_ident_continue = c: or (or (is_ident_head c) (is_digit c)) (eq_u8 c 39u8)
    in let is_bare_key_char = c: or (is_ident_continue c) (eq_u8 45u8 c)
    in let bare_key = parser_slice (repeated_at_least_one (filter any is_bare_key_char))
    in let dot = filter any (c: eq_u8 c 46u8)
    in separated_by (padded (alt short_string bare_key)) dot s

is_comment_content = c:
    or_lazy (and (le_u8 ' ' c) (le_u8 c '~'))
    (_: eq_u8 '\t' c)

comment = s: then (just "#") (repeated (validate_utf8 is_comment_content)) s

comment_or_whitespace = s: repeated (alt (one_of " \n\t") (alt comment (just "\r\n"))) s

padded_r = p: ignore_then comment_or_whitespace (then_ignore p comment_or_whitespace)
padded_r_with_state = p:
    then_with_state (stateless_ignored comment_or_whitespace)
    (then_with_state p
    (stateless_ignored comment_or_whitespace))

value = s:
    let string = parser_map string (a: String a)
    in let num = parser_map toml_num Num
    in let list = delimited_by (just "[")
        (padded_r (separated_by value (padded_r (just ","))))
        (then (or_not (just ",")) (then comment_or_whitespace (just "]")))
    in let list = parser_map list StaticArray
    in let obj_inner = separated_by
        (then key (ignore_then (padded (just "=")) value))
        (padded (just ","))
    in let obj = delimited_by (just "{") (padded obj_inner) (just "}")
    in let obj = parser_map obj (kvs: Table Closed (fold E kvs (acc: Cons k v: insert_value acc k v)))
    in let b_true = parser_map (just "true") (_: True)
    in let b_false = parser_map (just "false") (_: False)
    in alt string
        (alt list
        (alt obj
        (alt date_parser
        (alt float
        (alt num
        (alt b_true b_false))))))
        s

parse_line = s:
    let equation = parser_map (then (then_ignore key (padded (just "="))) value) (Cons k v: Define k v)
    in let base_key = parser_map (delimited_by (just "[") key (just "]")) BaseKey
    in let list_append = parser_map (delimited_by (just "[[") key (just "]]")) ListAppend
    in alt equation (alt base_key list_append) s

parser = f: state: s:
    let equations = padded_r_with_state
        (separated_by_with_state
            (acc: parser_map parse_line (f acc))
            (then (repeated (alt (one_of " \t") comment))
            (then new_line
            comment_or_whitespace)))
    in equations state s

// =================== Construction ===================

import "red_black_tree_lib.doki"

modify = tree_modify str_cmp
insert = tree_insert str_cmp

add_value_aux = key_h: key_t: obj: f:
    modify key_h obj (v: match v with
        Some a => add_value a key_t f,
        None => fold (f None) (reverse key_t) (acc: k: Table Open (insert k acc E)),
    end)

add_value = obj: key: f: match key with
        Cons key_h key_t => match obj with
                TomlArray (Cons (Table Closed _) _)
                | Table Closed _ => panic "closed table cannot be expanded",
                TomlArray (Cons (Table s obj) t) =>
                    TomlArray (Cons (Table s (add_value_aux key_h key_t obj f)) t),
                StaticArray (Cons obj t) => panic "static array cannot be modified",
                Table s obj => Table s (add_value_aux key_h key_t obj f),
            end,
        Nil => f (Some obj),
    end

insert_value = obj: key: value:
    match key with
        Cons key_h key_t => modify key_h obj (v: match v with
            Some (Table (Closed | SemiOpen) a) => let _ = debug a in
                panic "not an open table",
            Some (Table s a) => Table s (insert_value a key_t value),
            Some _ => panic "not a table",
            None => fold value (reverse key_t) (acc: k: Table Dotted (insert k acc E)),
        end),
        Nil => panic "value already exists",
    end

insert_values = obj: ds:
     (fold obj ds (acc: Define key value: insert_value acc key value))

append_value = obj: key: value: add_value obj key (old:
    match old with
        None => TomlArray (Cons value Nil),
        Some (StaticArray _) => panic "static array cannot be expanded",
        Some (TomlArray l) => TomlArray (Cons value l),
    end)

collect_list_mode_acc = obj: base_key: tmp_obj: list_mode: match list_mode with
        False => add_value obj base_key (old: match old with
                None => Table SemiOpen (insert_values E tmp_obj),
                Some (Table Open a) => Table SemiOpen (insert_values a tmp_obj),
                Some (Table _ _) => panic "closed table cannot be modified",
                _ => panic "not a table",
            end),
        True => append_value obj base_key (Table SemiOpen (insert_values E tmp_obj)),
    end

toml_to_obj_aux = Cons obj (Cons base_key (Cons tmp_obj list_mode)): line: match line with
        Define key value => let tmp_obj = Cons line tmp_obj
                in Cons obj (Cons base_key (Cons tmp_obj list_mode)),
        BaseKey next_base_key => let obj = collect_list_mode_acc obj base_key tmp_obj list_mode
                in Cons obj (Cons next_base_key (Cons Nil False)),
        ListAppend next_base_key => let obj = collect_list_mode_acc obj base_key tmp_obj list_mode
                in Cons obj (Cons next_base_key (Cons Nil True)),
    end

// =================== Object to String ===================

tree_iter_aux = t: continue: match t with
        E => continue Unit,
        T _ k v l r => tree_iter_aux l (_:
            Some (Cons (Cons k v) (_: tree_iter_aux r continue))
        )
    end

tree_iter = t: tree_iter_aux t (_: None)

print_tree_aux = print_key: print_value: t:
    match t Unit with
        None => append_to_print_buff "}",
        Some (Cons (Cons k v) t) =>
            let _ = append_to_print_buff ", "
            in let _ = print_key k
            in let _ = append_to_print_buff ": "
            in let _ = print_value v
            in print_tree_aux print_key print_value t,
    end

print_tree = print_key: print_value: t:
    match tree_iter t with
        None => append_to_print_buff "{}",
        Some (Cons (Cons k v) t) =>
            let _ = append_to_print_buff "{"
            in let _ = print_key k
            in let _ = append_to_print_buff ": "
            in let _ = print_value v
            in print_tree_aux print_key print_value t,
    end

print_list_aux = l: f: match l with
        Nil => append_to_print_buff "]",
        Cons h t => let _ = append_to_print_buff ", "
            in let _ = f h
            in print_list_aux t f,
    end

print_list = l: f: match l with
        Nil => append_to_print_buff "[]",
        Cons h t => let _ = append_to_print_buff "["
            in let _ = f h
            in print_list_aux t f,
    end

data PrintList 1
data WithType 2

obj_to_string_with_tag = obj: match obj with
        Num n => WithType "integer" (PrintAnd "\"" (PrintAnd (i64_to_string n) "\"")),
        Float n => WithType "float" (PrintAnd "\"" (PrintAnd n "\"")),
        String s => WithType "string" (PrintStringEscaped s),
        Table _ t => PrintTree t,
        StaticArray l => PrintList l,
        TomlArray l => PrintList (reverse l),
        True => WithType "bool" r#""true""#,
        False => WithType "bool" r#""false""#,
        DateTime t a => WithType t (PrintAnd "\"" (PrintAnd a "\"")),
    end

obj_to_string_without_tag = obj: match obj with
        Num n => i64_to_string n,
        Float n => n,
        String s => PrintStringEscaped s,
        Table _ t => PrintTree t,
        StaticArray l => PrintList l,
        TomlArray l => PrintList (reverse l),
        True => "true",
        False => "false",
        DateTime _ a => a,
    end

obj_to_string = obj_to_string_without_tag

plus_u8 = a: b: intrinsic_i64_to_u8 (plus (intrinsic_u8_to_i64 a) (intrinsic_u8_to_i64 b))

u8_to_hex_char = n: match le_u8 n 9u8 with
        True => plus_u8 n '0',
        False => plus_u8 n 55u8,
    end

to_escaped = c:
    let f = c: push_to_print_buff c
    in let _ = f '\\'
    in let _ = f 'u'
    in let _ = f '0'
    in let _ = f '0'
    in let _ = f (u8_to_hex_char (right_shift_u8 c 4))
    in let _ = f (u8_to_hex_char (intrinsic_bitwise_and_u8 15u8 c))
    in Unit

bitwise_and_u8 = intrinsic_bitwise_and_u8

buff_capacity = 1024
print_buff = malloc buff_capacity
print_buff_len = intrinsic_mut 0

append_to_print_buff = Str s_d s_len s_p:
    let buff_len = intrinsic_get print_buff_len
    in match le (plus buff_len s_len) buff_capacity with
        True => let _ = intrinsic_set print_buff_len (plus buff_len s_len)
            in ptr_copy print_buff buff_len s_p s_d s_len,
        False => let _ = flush_buff Unit
            in let _ = intrinsic_set print_buff_len s_len
            in ptr_copy print_buff 0 s_p s_d s_len,
    end

push_to_print_buff = c:
    let buff_len = intrinsic_get print_buff_len
    in match le (plus buff_len 1) buff_capacity with
        True => let _ = intrinsic_set print_buff_len (plus buff_len 1)
            in store_u8 print_buff buff_len c,
        False => let _ = flush_buff Unit
            in let _ = intrinsic_set print_buff_len 1
            in store_u8 print_buff 0 c,
    end

flush_buff = _:
    let _ = print (Str 0 (intrinsic_get print_buff_len) print_buff)
    in intrinsic_set print_buff_len 0

print_string_escaped = len: pointer: d:
    match len with
        0 => Unit,
        _ => let c = intrinsic_load_u8 pointer d
            in let n =
                match or (eq_u8 c '"')
                    (or (eq_u8 c '\\')
                    (or (le_u8 c 31u8)
                    (eq_u8 c 0x7Fu8))) with
                    True => let _ = to_escaped c
                        in 1,
                    False =>
                match eq_u8 c 0b11000010u8 with
                    True => let c2 = intrinsic_load_u8 pointer (plus d 1)
                        in let _ = to_escaped c2
                        in 2,
                    False =>
                        let _ = push_to_print_buff c
                        in 1,
                end,
                end
            in print_string_escaped (minus len n) pointer (plus d n),
    end

data PrintAnd 2
data PrintStringEscaped 1
data PrintTree 1

print_fmt = a: match a with
        PrintAnd a b => let _ = print_fmt a
            in print_fmt b,
        PrintStringEscaped (Str d len pointer) =>
            let _ = append_to_print_buff "\""
            in let _ = print_string_escaped len pointer d
            in append_to_print_buff "\"",
        PrintTree t => print_tree (k: print_fmt (PrintStringEscaped k)) (v: print_fmt (obj_to_string v)) t,
        PrintList l => print_list l (v: print_fmt (obj_to_string v)),
        WithType t a => let _ = append_to_print_buff r#"{"type":""#
            in let _ = append_to_print_buff t
            in let _ = append_to_print_buff r#"","value":"#
            in let _ = print_fmt a
            in append_to_print_buff "}",
        s => append_to_print_buff s,
    end

print_fmt_ln = a: let _ = print_fmt a
    in append_to_print_buff "\n"

// =================== Main ===================

run = _:
    let s = array_to_str (read_all Unit)
    in let acc = Cons (Table Open E) (Cons Nil (Cons Nil False))
    in match parser toml_to_obj_aux acc s with
        Err Unit => Err Unit,
        Ok (Cons e rest) => match str_len rest with
                0 => let Cons obj (Cons base_key (Cons tmp_obj list_mode)) = e
                    in let t = collect_list_mode_acc obj base_key tmp_obj list_mode
                    in let _ = print_fmt_ln (obj_to_string t)
                    in let _ = flush_buff Unit
                    in Ok Unit,
                _ => Err Unit,
            end,
    end

main = _: match run Unit with
        Err _ => panic "err",
        Ok _ => Unit,
    end
