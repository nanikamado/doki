data Unit 0
data True 0
data False 0

print = Str l p: intrinsic_write p l

println = a: let _ = print a
    in print "\n"

div = intrinsic_div
plus = intrinsic_plus
rem = intrinsic_rem
minus = intrinsic_minus
lt = intrinsic_lt
mul = intrinsic_mul
le = a: b: lt a (plus b 1)

log10 = a: match a with
        0 => 0,
        _ => plus (log10 (div a 10)) 1,
    end

i64_to_string_aux = s: a: l:
    match l with
        0 => Unit,
        _ =>
            let s = intrinsic_add_ptr s -1
            in let _ = intrinsic_store_u8 s (intrinsic_i64_to_u8 (plus 48 (rem a 10)))
            in i64_to_string_aux s (div a 10) (minus l 1),
    end

max = a: b: match (lt a b) with
        0 => a,
        _ => b,
    end

i64_to_string = a:
    let negative = (lt a 0)
    in let l = max 1 (log10 a)
    in let str_l = plus l negative
    in let s = intrinsic_malloc str_l
    in let a = match negative with
            0 => a,
            _ =>
                let _ = intrinsic_store_u8 s 45u8
                in (minus 0 a),
        end
    in let _ = i64_to_string_aux (intrinsic_add_ptr s str_l) a l
    in Str str_l s

str_eq_aux = n: s1: s2: match n with
        0 => True,
        _ => match intrinsic_eq_u8 (intrinsic_load_u8 s1) (intrinsic_load_u8 s2) with
                1 => str_eq_aux (minus n 1) (intrinsic_add_ptr s1 1) (intrinsic_add_ptr s2 1),
                _ => False,
            end,
    end

str_eq = Str n1 s1: Str n2 s2: match intrinsic_eq n1 n2 with
        1 => str_eq_aux n1 s1 s2,
        0 => False,
    end

data Cons 2
data Nil 0

read_num = a:
    let c = intrinsic_getchar 0
    in match (mul (le 48 c) (le c 57)) with
            0 => a,
            _ => read_num (plus (mul 10 a) (minus c 48)),
        end

fib = n: a: b:
    match n with
        0 => a,
        _ => f "fib" (minus n 1) b (plus a b),
    end

fs = Cons (Cons "read_num" read_num)
        (Cons (Cons "fib" fib)
        (Cons (Cons "i64_to_string" i64_to_string)
        (Cons (Cons "println" println)
        Nil)))

lookup = Cons (Cons k v) t: s: match str_eq s k with
        True => v,
        False => lookup t s,
    end

f = s: lookup fs s

main = _:
    let _ = print "> "
    in f "println" (f "i64_to_string" (f "fib" (f "read_num" 0) 0 1))
